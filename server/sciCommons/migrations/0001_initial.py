# Generated by Django 4.1.7 on 2023-03-23 17:04

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('fullName', models.CharField(blank=True, max_length=255, null=True)),
                ('email', models.EmailField(blank=True, max_length=254, null=True)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatars')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'ordering': ['username'],
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('slug', models.SlugField(max_length=255, unique=True)),
                ('abstract', models.TextField()),
                ('keywords', models.CharField(blank=True, max_length=255, null=True)),
                ('tldr', models.TextField(blank=True, null=True)),
                ('articleUrl', models.URLField(blank=True, null=True)),
                ('createdOn', models.DateTimeField(auto_now_add=True)),
                ('type', models.CharField(choices=[('op', 'Open Article'), ('sb', 'Single Blinded'), ('db', 'Double Blinded')], default='op', max_length=5)),
                ('author', models.ManyToManyField(related_name='authors', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
                ('createdOn', models.DateTimeField(auto_now_add=True)),
                ('likes', models.IntegerField(default=0)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Community',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('slug', models.SlugField(max_length=255, unique=True)),
                ('description', models.TextField()),
                ('createdOn', models.DateTimeField(auto_now_add=True)),
                ('articles', models.ManyToManyField(blank=True, related_name='communities', to='sciCommons.article')),
            ],
        ),
        migrations.CreateModel(
            name='UserMeta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bio', models.TextField(blank=True, null=True)),
                ('website', models.URLField(blank=True, null=True)),
                ('location', models.CharField(blank=True, max_length=255, null=True)),
                ('twitter', models.URLField(blank=True, null=True)),
                ('github', models.URLField(blank=True, null=True)),
                ('linkedin', models.URLField(blank=True, null=True)),
                ('degree', models.CharField(blank=True, max_length=255, null=True)),
                ('institution', models.CharField(blank=True, max_length=255, null=True)),
                ('field', models.CharField(blank=True, max_length=255, null=True)),
                ('articles', models.ManyToManyField(blank=True, related_name='authors', related_query_name='usermeta', to='sciCommons.article')),
                ('bookmarks', models.ManyToManyField(blank=True, related_name='bookmarks', to='sciCommons.article')),
                ('comments', models.ManyToManyField(blank=True, related_name='comments', related_query_name='usermeta', to='sciCommons.comment')),
                ('communities', models.ManyToManyField(blank=True, related_name='community_meta', related_query_name='usermeta', to='sciCommons.community')),
                ('dislikes', models.ManyToManyField(blank=True, related_name='dislikes', related_query_name='usermeta', to='sciCommons.article')),
                ('likes', models.ManyToManyField(blank=True, related_name='likes', related_query_name='usermeta', to='sciCommons.article')),
            ],
        ),
        migrations.CreateModel(
            name='Membership',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date_joined', models.DateTimeField(auto_now_add=True)),
                ('is_admin', models.BooleanField(default=False)),
                ('membership_type', models.CharField(choices=[('admin', 'Admin'), ('moderator', 'Moderator'), ('member', 'Member')], default='member', max_length=20)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='community',
            name='members',
            field=models.ManyToManyField(blank=True, related_name='memberships', to='sciCommons.membership'),
        ),
        migrations.CreateModel(
            name='ArticleMeta',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('likes', models.IntegerField(default=0)),
                ('dislikes', models.IntegerField(default=0)),
                ('views', models.IntegerField(default=0)),
                ('video', models.URLField(blank=True, null=True)),
                ('license', models.CharField(blank=True, max_length=255, null=True)),
                ('code', models.URLField(blank=True, null=True)),
                ('comments', models.ManyToManyField(blank=True, related_name='articles_meta', to='sciCommons.comment')),
                ('communities', models.ManyToManyField(blank=True, related_name='articles_meta', to='sciCommons.community')),
            ],
        ),
        migrations.AddField(
            model_name='article',
            name='meta',
            field=models.ForeignKey(blank=True, on_delete=django.db.models.deletion.CASCADE, to='sciCommons.articlemeta'),
        ),
        migrations.AddField(
            model_name='user',
            name='meta',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='sciCommons.usermeta'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='Review',
            fields=[
                ('comment_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='sciCommons.comment')),
                ('title', models.CharField(max_length=255)),
                ('type', models.CharField(choices=[('review', 'Review'), ('comment', 'Comment'), ('decision', 'Decision')], default='review', max_length=20)),
                ('replys', models.ManyToManyField(blank=True, related_name='replies', to='sciCommons.review')),
            ],
            options={
                'ordering': ['-createdOn'],
            },
            bases=('sciCommons.comment',),
        ),
    ]
